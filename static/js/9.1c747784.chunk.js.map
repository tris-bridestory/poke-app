{"version":3,"sources":["components/modal/index.js","pages/detail/index.js"],"names":["ModalBox","onChange","onSubmit","id","className","css","bind","type","placeholder","value","PokeTab","lazy","PokemonDetail","useParams","useState","pokemonCapture","setPokemonCapture","pokemonName","setPokemonName","useContext","PokemonContext","currentPokemon","capture","fetchCurrentPokemon","capturedPokemons","useEffect","a","fetch","response","json","data","fetchPokemon","openModal","modal","document","getElementById","span","getElementsByClassName","style","display","onclick","window","event","target","updatePokemon","owned","push","name","localStorage","setItem","JSON","stringify","searchKey","object","arrayObj","i","length","alt","src","sprites","front_default","moves","map","move","key","types","onClick","pokemon","Math","random","some","p","temp","parse","getItem","index","parseInt","findIndex","x","alert","capturePokemon","e","preventDefault","validation"],"mappings":"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","file":"static/js/9.1c747784.chunk.js","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport React from 'react';\nimport { css, jsx } from '@emotion/react'\nimport styled from '@emotion/styled'\n\nconst ModalBox = ({onChange, onSubmit}) => {\n    return (\n        <div id=\"myModal\" className=\"modal\" css={css`\n            display: none;\n            position: fixed;\n            z-index: 1;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n            overflow: auto;\n            background-color: rgb(0,0,0);\n            background-color: rgba(0,0,0,0.4);\n        `}>\n            <div className=\"modal-content\" css={css`\n                background-color: #fefefe;\n                margin: 15% auto;\n                padding: 20px;\n                border: 1px solid #888;\n                width: 80%;\n                position: relative;\n                background-color: #fefefe;\n                margin: auto;\n                padding: 0;\n                border: 1px solid #888;\n                width: 80%;\n                box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n            `}>\n                <div className=\"modal-header\" css={css`\n                    padding: 2px 16px;\n                    background-color: #5cb85c;\n                    color: white;\n                `}>\n                    <span className=\"close\" css={css`\n                        color: #aaa;\n                        float: right;\n                        font-size: 28px;\n                        font-weight: bold;\n                        &:hover,&:focus: {\n                            color: black;\n                            text-decoration: none;\n                            cursor: pointer;\n                        }\n                    `}>&times;</span>\n                    <h2>Modal Header</h2>\n                </div>\n                <div className=\"modal-body\" css={css`\n                    padding: 2px 16px;\n                `}>\n                    <form onSubmit={onSubmit.bind(this)}>\n                        <label>\n                            Enter Nickname\n                            <input type=\"text\" placeholder=\"Insert pokemon name\" onChange={onChange.bind(this)} />\n                        </label>\n                        <input type=\"submit\" value=\"Submit\" />\n                        <span css={css`color:red;display:none`} className=\"validation\">Name is already taken</span>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport {ModalBox};\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport React, { useEffect, useContext, lazy, useState } from 'react';\nimport { css, jsx } from '@emotion/react'\nimport { useParams } from 'react-router-dom';\nimport { PokemonContext } from '../../PokemonContext';\nimport { ModalBox } from '../../components/modal';\nconst PokeTab = lazy(() => import('../tab'));\n\nconst url = \"https://pokeapi.co/api/v2/pokemon/\";\n\nconst PokemonDetail = () => {\n  const { id } = useParams()\n  const [pokemonCapture, setPokemonCapture] = useState();\n  const [pokemonName, setPokemonName] = useState();\n  const { currentPokemon, capture, fetchCurrentPokemon, capturedPokemons } = useContext(PokemonContext);\n\n  useEffect(() => {\n    const fetchPokemon = async (id) => {\n        const response = await fetch(url + id);\n        const data = await response.json();\n        fetchCurrentPokemon(data)\n    };\n\n    fetchPokemon(id);\n  }, [fetchCurrentPokemon]);\n\n  const capturePokemon = (pokemon) => {\n    if (Math.random() < 0.5) {\n      const found = capturedPokemons.some(p => p.id === pokemon.id)\n\n      if (!found) {\n        let data = {\n          id: pokemon.id,\n          name: pokemon.name,\n          owned: []\n        }\n\n        setPokemonCapture(data)\n\n        openModal()\n      } else {\n        let temp = JSON.parse(localStorage.getItem('pokedex'))\n        let index = parseInt(temp.findIndex(x => x.id === pokemon.id));\n        setPokemonCapture(temp[index])\n        openModal()\n      }\n    } else {\n      alert('failed')\n    }\n  }\n\n  const openModal = () => {\n    var modal = document.getElementById(\"myModal\");\n    var span = document.getElementsByClassName(\"close\")[0];\n    \n    modal.style.display = \"block\";\n\n    span.onclick = function() {\n      modal.style.display = \"none\";\n    }\n\n    window.onclick = function(event) {\n      if (event.target === modal) {\n        modal.style.display = \"none\";\n      }\n    }\n  }\n  \n  const handleNameOnChange = (e) => {\n    setPokemonName(e.target.value);\n  }\n\n  const submitForm = (e) => {\n    e.preventDefault();\n    var validation = document.getElementsByClassName(\"validation\")[0];\n\n    if(localStorage.getItem('pokedex') && JSON.parse(localStorage.getItem('pokedex')).length > 0) {\n\n      let temp = JSON.parse(localStorage.getItem('pokedex'))\n      let index = parseInt(temp.findIndex(x => x.id === pokemonCapture.id));\n\n      if (index === -1) {\n        updatePokemon()\n      } else {\n        if (searchKey(pokemonName, temp[index].owned)) {\n          validation.style.display = 'block';\n        } else {\n          updatePokemon()\n          validation.style.display = 'none';\n        }\n      }\n    } else {\n      updatePokemon()\n    }\n  }\n\n  const updatePokemon = () => {\n    var modal = document.getElementById(\"myModal\");\n    let data = pokemonCapture\n\n    data.owned.push({\n      name: pokemonName\n    })\n\n    setPokemonCapture(data)\n    setPokemonName('')\n\n    capture(data)\n\n    localStorage.setItem('pokedex', JSON.stringify(capturedPokemons))\n    modal.style.display = \"none\";\n  }\n\n  const searchKey = (object, arrayObj) => {\n    for (var i=0; i < arrayObj.length; i++) {\n      if (arrayObj[i].name === object) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  return (\n    <div>\n      <h2>Pokemon Detail</h2>\n      <PokeTab />\n      <img alt={currentPokemon && currentPokemon.name} src={currentPokemon && currentPokemon.sprites && currentPokemon.sprites.front_default}></img>\n      <h3>{currentPokemon && currentPokemon.name}</h3>\n      <p>Moves</p>\n      <ul>\n        {\n          currentPokemon && currentPokemon.moves && currentPokemon.moves.map((move) => (\n            <li key={move.move.name}>\n              {move.move.name}\n            </li>\n          ))\n        }\n      </ul>\n      <p>Types</p>\n      <ul>\n        {\n          currentPokemon && currentPokemon.types && currentPokemon.types.map((type) => (\n            <li key={type.type.name}>\n              {type.type.name}\n            </li>\n          ))\n        }\n      </ul>\n      <button onClick={() => capturePokemon(currentPokemon)}>Catch Pokemon</button>\n      <ModalBox onChange={handleNameOnChange.bind(this)} onSubmit={submitForm.bind(this)} />\n      {/* <div id=\"myModal\" className=\"modal\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <span className=\"close\">&times;</span>\n            <h2>Modal Header</h2>\n          </div>\n          <div className=\"modal-body\">\n            <form onSubmit={submitForm}>\n              <label>\n                Enter Nickname\n                <input type=\"text\" placeholder=\"Insert pokemon name\" onChange={handleNameOnChange} />\n              </label>\n              <input type=\"submit\" value=\"Submit\" />\n              <span style={{color:'red',display:'none'}} className=\"validation\">Name is already taken</span>\n            </form>\n          </div>\n        </div>\n      </div> */}\n    </div>\n  )\n}\n\nexport default PokemonDetail;\n"],"sourceRoot":""}